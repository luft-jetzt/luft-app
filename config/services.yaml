# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'de'
    twitter.client_id: ThisTokenIsNotSoSecretChangeIt
    twitter.client_secret: ThisTokenIsNotSoSecretChangeIt
    yourls.api_url: '%env(YOURLS_HOSTNAME)%'
    yourls.api_username: '%env(YOURLS_USERNAME)%'
    yourls.api_password: '%env(YOURLS_PASSWORD)%'
    router.request_context.host: 'luft.jetzt'
    router.request_context.scheme: 'https'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $twitterClientId: '%env(TWITTER_CLIENT_ID)%'
            $twitterClientSecret: '%env(TWITTER_CLIENT_SECRET)%'
            $apiUrl: '%env(YOURLS_API_URL)%'
            $apiUsername: '%env(YOURLS_API_USERNAME)%'
            $apiPassword: '%env(YOURLS_API_PASSWORD)%'
            $graphCacheDirectory: '%env(GRAPH_CACHE_DIRECTORY)%'
            $openWeatherMapAppId: '%env(OPENWEATHERMAP_APPID)%'
            $redisHost: 'redis://%env(REDIS_HOST)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Admin,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Twitter\MessageFactory\MessageFactoryInterface:
        alias: App\Twitter\MessageFactory\ExtendedEmojiMessageFactory

    App\Pollution\DataRetriever\DataRetrieverInterface:
        #alias: App\Pollution\DataRetriever\CachedElasticDataRetriever
        alias: App\Pollution\DataRetriever\ChainedDataRetriever
        #alias: App\Pollution\DataRetriever\ElasticDataRetriever

    App\Pollution\PollutantFactoryStrategy\PollutantFactoryStrategyInterface:
        alias: App\Pollution\PollutantFactoryStrategy\LuftdatenPollutantFactoryStrategy

    App\Pollution\PollutionDataFactory\PollutionDataFactoryInterface:
        alias: App\Pollution\PollutionDataFactory\PollutionDataFactory

    App\SeoPage\SeoPage:
        arguments:
            $sonataSeoPage: '@sonata.seo.page.default'

    App\Pollution\UniqueStrategy\UniqueStrategyInterface:
        alias: App\Pollution\UniqueStrategy\CacheUniqueStrategy

    App\Pollution\DataPersister\PersisterInterface:
        alias: App\Pollution\DataPersister\ElasticPersister

    App\Geocoding\Guesser\CityGuesser:
        $provider: '@bazinga_geocoder.provider.nominatim'

    App\Geocoding\Geocoder\Geocoder:
        $provider: '@bazinga_geocoder.provider.nominatim'

    app.geocoding_cache:
        class: Symfony\Component\Cache\Simple\Psr6Cache
        arguments: ['@app.cache.geocoding']

    App\DataPurger\DataPurgerInterface:
        alias: App\DataPurger\FastDataPurger

    App\Pollution\DataFinder\ElasticFinder:
        arguments:
            $searchable: '@fos_elastica.index.air_data.data'

    App\Pollution\DataPersister\ElasticPersister:
        arguments:
            $index: '@fos_elastica.index.air_data'

    App\Pollution\DataFinder\FinderInterface:
        alias: App\Pollution\DataFinder\ElasticFinder